import{html,PolymerElement}from"../../../@polymer/polymer/polymer-element.js";import{GestureEventListeners}from"../../../@polymer/polymer/lib/mixins/gesture-event-listeners.js";import{FlattenedNodesObserver}from"../../../@polymer/polymer/lib/utils/flattened-nodes-observer.js";import"../../../@polymer/iron-flex-layout/iron-flex-layout.js";import"../../../@webcomponents/shadycss/entrypoints/apply-shim.js";import{BeruangBehavior}from"../../beruang-behavior.js";import{BrownBehavior}from"../brown-behavior.js";import{BrownTabBehavior}from"./brown-tab-behavior.js";import"./brown-tab-style.js";/**
`brown-tab-dynamic-desktop` is dynamic tab panel element.
@customElement
@polymer
*/class BrownTabManualDesktop extends BrownTabBehavior(BrownBehavior(BeruangBehavior(GestureEventListeners(PolymerElement)))){static get template(){return html`
      <style  include="brown-tab-style"></style>
      <div id="header">
        <iron-icon icon="chevron-left" id="pre-scroll" class="scroller" on-tap="_preScroll"></iron-icon>
        <div id="header-item"><slot id="header-slot" name="header"></slot></div>
        <iron-icon icon="chevron-right" id="post-scroll" class="scroller" on-tap="_postScroll"></iron-icon>
      </div>
      <div id="content"><slot name="content"></slot></div>
    `}ready(){super.ready();let slot=this.shadowRoot.querySelector("#content"),fMonitorCallback=info=>{for(let i=0;i<info.addedNodes.length;i++){let content=info.addedNodes[i],activeTabId=content.getAttribute("data-active-tab"),nextActiveTab=activeTabId?this._getTabItemById(activeTabId):null;if(nextActiveTab){let oldActiveTab=this._getActiveTabItem();if(nextActiveTab!=oldActiveTab){if(oldActiveTab){oldActiveTab.active=!1}nextActiveTab.active=!0}}}//for(let i=0;i<info.addedNodes.length;i++)
};this._contentObserver=new FlattenedNodesObserver(slot,fMonitorCallback)}_onTabClosing(tabItem){this.dispatchEvent(new CustomEvent("manual-tabitem-closing",{bubbles:!0,composed:!0,detail:{tabItem:tabItem,oldContent:this._getContent(),nextSibling:this._getTabItemNextSibling(tabItem),prevSibling:this._getTabItemPrevSibling(tabItem)}}))}_onTabActiving(tabItem){this._ensureItemVisible(tabItem);this.dispatchEvent(new CustomEvent("manual-tabitem-activing",{bubbles:!0,composed:!0,detail:{id:tabItem.id,oldContent:this._getContent()}}))}_onTabActiveChanged(tabItem,active){}_getActiveTabItem(){let fCheck=el=>{let isQualified="BROWN-TABITEM-DESKTOP"==el.nodeName&&el.active;return isQualified};return this._getLightDOM(this.firstElementChild,!0,fCheck)}_getTabItemById(tabId){let fCheck=el=>{let data="BROWN-TABITEM-DESKTOP"==el.nodeName?el.id:null;return tabId==data};return this._getLightDOM(this.firstElementChild,!0,fCheck)}_getTabItemNextSibling(tabItem){let fCheck=el=>{return"BROWN-TABITEM-DESKTOP"==el.nodeName};return this._getLightDOM(tabItem.nextElementSibling,!0,fCheck)}_getTabItemPrevSibling(tabItem){let fCheck=el=>{return"BROWN-TABITEM-DESKTOP"==el.nodeName};return this._getLightDOM(tabItem.previousElementSibling,!1,fCheck)}_getContent(){let fCheck=el=>{return"content"==el.getAttribute("slot")};return this._getLightDOM(this.lastElementChild,!1,fCheck)}}window.customElements.define("brown-tab-manual-desktop",BrownTabManualDesktop);