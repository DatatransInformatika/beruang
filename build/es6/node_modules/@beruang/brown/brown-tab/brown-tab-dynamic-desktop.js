/**
@license
Copyright (c) 2019 The Beruang Project Authors. All rights reserved.
This code may only be used under the BSD style license found at
https://github.com/DatatransInformatika/beruang/blob/master/LICENSE.txt The complete set of authors may be found at
https://github.com/DatatransInformatika/beruang/blob/master/AUTHORS.txt The complete set of contributors may be
found at https://github.com/DatatransInformatika/beruang/blob/master/CONTRIBUTORS.txt
*/import{html,PolymerElement}from"../../../@polymer/polymer/polymer-element.js";import{GestureEventListeners}from"../../../@polymer/polymer/lib/mixins/gesture-event-listeners.js";import"../../../@polymer/iron-flex-layout/iron-flex-layout.js";import"../../../@webcomponents/shadycss/entrypoints/apply-shim.js";import{BeruangBehavior}from"../../beruang-behavior.js";import{BrownBehavior}from"../brown-behavior.js";import{BrownMaskBehavior}from"../brown-mask/brown-mask-behavior.js";import{BrownTabBehavior}from"./brown-tab-behavior.js";import"./brown-tab-style.js";/**
`brown-tab-dynamic-desktop` is dynamic tab panel element.
@customElement
@polymer
*/class BrownTabDynamicDesktop extends BrownTabBehavior(BrownMaskBehavior(//syarat masking 1
BrownBehavior(BeruangBehavior(GestureEventListeners(PolymerElement))))){static get template(){return html`
      <style  include="brown-tab-style"></style>
      <div id="header">
        <iron-icon icon="chevron-left" id="pre-scroll" class="scroller" on-tap="_preScroll"></iron-icon>
        <div id="header-item"><slot id="header-slot" name="header"></slot></div>
        <iron-icon icon="chevron-right" id="post-scroll" class="scroller" on-tap="_postScroll"></iron-icon>
      </div>
      <div id="content"><slot name="content"></slot></div>
      <slot name="mask"></slot><!--syarat masking 2-->
    `}_onTabClosing(tabItem){//1. pindahkan status aktif ke tabItem lain (jika ada)
if(tabItem.active){//if closing tabitem is active then set other to active
this._removeDynamicContent();let other=this._getTabItemSibling(tabItem,null/*no criteria*/);//cari sibling tanpa periksa aktif atau tidak
if(other){//jika ada
other.active=!0;//pindahkan status active ke tabItem lain
}}//2. remove tabItem
this.removeChild(tabItem);//remove tabItem
}_onTabActiving(tabItem){//1. cari tabItem lain yang berstatus aktif, jika ada maka batalkan status aktif
let callback=sibling=>{//callback akan dikirimkan ke fungsi _getTabItemSibling
return!0==sibling.active;//syarat sibling: aktif
},other=this._getTabItemSibling(tabItem,callback);//callback sudah dikirimkan ke fungsi _getTabItemSibling
//other -> sibling
if(other){other.active=!1;//matikan tab lain yang statusnya aktif(mengalami _activeChanged)
}//////////////////////mengatifkan tab, nonaktifkan tab lain: END///////////////////////////////////
//////////////////////aktifkan tab yang di-klik: START///////////////////////////////////
//2. set status active tabItem menjadi true
tabItem.active=!0;//properti tabitem desktop menjadi aktif(mengalami _activeChanged)
}_onTabActiveChanged(tabItem,active){if(active){this._requestDynamicContent(tabItem.id)}else{this._removeDynamicContent()}}_removeDynamicContent(){//hanya ada satu div content jika content=="dynamic"//v
let fCheck=el=>{return"content"==el.slot},content=this._getLightDOM(this.lastElementChild,!1,fCheck);if(content){this.removeChild(content)}}_requestDynamicContent(id){//v
let callback=el=>{el.slot="content";this.appendChild(el);//index.html: callback(div);
};this.dispatchEvent(new CustomEvent("dynamic-content",//konstruksi event argument 1: nama event
{bubbles:!0,composed:!0,//mengambil anggota active dari event: event.detail.active;
detail:{id:id,callback:callback/*index.html: decorator diisi div*/ //event "active-changed" mengirim newValue
}//konstruksi event argument 2: object event
}))}}window.customElements.define("brown-tab-dynamic-desktop",BrownTabDynamicDesktop);