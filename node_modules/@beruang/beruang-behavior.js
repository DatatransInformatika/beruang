/**
@license
Copyright (c) 2019 The Beruang Project Authors. All rights reserved.
This code may only be used under the BSD style license found at
https://github.com/DatatransInformatika/beruang/blob/master/LICENSE.txt The complete set of authors may be found at
https://github.com/DatatransInformatika/beruang/blob/master/AUTHORS.txt The complete set of contributors may be
found at https://github.com/DatatransInformatika/beruang/blob/master/CONTRIBUTORS.txt
*/
import {dedupingMixin} from '@polymer/polymer/lib/utils/mixin.js';

/**
`BeruangBehavior`
@polymerBehavior BeruangBehavior
*/
let internalBeruangBehavior = (base) =>
class extends base {
	static get properties() {
		return {
			/** Fully occupies parent element client area.
			@type{Boolean}
			*/
			fitParent: {
				type: Boolean,
				value: false,
				reflectToAttribute: true
			}
    	};
	}

	ready() {
		super.ready();
		this.dispatchEvent(new CustomEvent("beruang-ready"));
	}

	_stableSize(fWidth, fHeight, fCallback) {
		const MAXCOUNT = 200;
		const MAXSTABLE = 5;

		let count = 0;
		let stableCount = 0;
		let stableWidth = 0;
		let stableHeight = 0;

		let x = setInterval(
			()=>{
				let w = fWidth ? fWidth() : 0;
				let h = fHeight ? fHeight() : 0;

				if( w!=stableWidth || h!=stableHeight ) {
					stableCount = 0;
				} else if( w==stableWidth && h==stableHeight ) {
					stableCount++;
				}

				if(stableCount>=MAXSTABLE) {
					clearInterval(x);
					fCallback(stableWidth, stableHeight);
					return;
				}

				if( w!=stableWidth ) {//width changed, update stableWidth
					stableWidth = w;
				}

				if( h!=stableHeight ) {//width changed, update stableHeight
					stableHeight = h;
				}

				count++;
				if(count>MAXCOUNT) {
					clearInterval(x);
					fCallback(stableWidth, stableHeight);
					throw new RangeError("unstable polar-border size");
				}
			}, 50);
	}
}

export const BeruangBehavior = dedupingMixin(internalBeruangBehavior);
