/**
@license
Copyright (c) 2019 The Beruang Project Authors. All rights reserved.
This code may only be used under the BSD style license found at
https://github.com/DatatransInformatika/beruang/blob/master/LICENSE.txt The complete set of authors may be found at
https://github.com/DatatransInformatika/beruang/blob/master/AUTHORS.txt The complete set of contributors may be
found at https://github.com/DatatransInformatika/beruang/blob/master/CONTRIBUTORS.txt
*/
import {html, PolymerElement} from '@polymer/polymer/polymer-element.js';
import {GestureEventListeners} from '@polymer/polymer/lib/mixins/gesture-event-listeners.js';
import '@polymer/iron-flex-layout/iron-flex-layout.js';
import '@webcomponents/shadycss/entrypoints/apply-shim.js';
import {BeruangBehavior} from '@beruang/beruang-behavior.js';
import {BrownBehavior} from '@beruang/brown/brown-behavior.js';
import {BrownTabBehavior} from './brown-tab-behavior.js';
import './brown-tab-style.js';

/**
`brown-tab-dynamic-desktop` is dynamic tab panel element.
@customElement
@polymer
*/
class BrownTabDynamicDesktop extends BrownTabBehavior(BrownBehavior(BeruangBehavior(GestureEventListeners(PolymerElement)))) {
  static get template() {
    return html`
      <style  include="brown-tab-style"></style>
      <div id="header">
        <iron-icon icon="chevron-left" id="pre-scroll" class="scroller" on-tap="_preScroll"></iron-icon>
        <div id="header-item"><slot id="header-slot" name="header"></slot></div>
        <iron-icon icon="chevron-right" id="post-scroll" class="scroller" on-tap="_postScroll"></iron-icon>
      </div>
      <div id="content"><slot name="content"></slot></div>
    `;
  }

  _onTabClosing(tabItem) {
      //1. pindahkan status aktif ke tabItem lain (jika ada)
      if(tabItem.active) {//if closing tabitem is active then set other to active
          this._removeDynamicContent();
          let other = this._getTabItemSibling(tabItem, null/*no criteria*/);//cari sibling tanpa periksa aktif atau tidak
          if(other) {//jika ada
              other.active = true;//pindahkan status active ke tabItem lain
          }
      }
      //2. remove tabItem
      this.removeChild(tabItem);//remove tabItem
  }

  _onTabActiving(tabItem){
      //1. cari tabItem lain yang berstatus aktif, jika ada maka batalkan status aktif
      let callback = (sibling)=>{//callback akan dikirimkan ke fungsi _getTabItemSibling
          return sibling.active==true;//syarat sibling: aktif
      };
      //callback sudah dikirimkan ke fungsi _getTabItemSibling
      let other = this._getTabItemSibling(tabItem, callback);//other -> sibling
      if(other) {
          other.active = false;//matikan tab lain yang statusnya aktif(mengalami _activeChanged)
      }
      //////////////////////mengatifkan tab, nonaktifkan tab lain: END///////////////////////////////////

      //////////////////////aktifkan tab yang di-klik: START///////////////////////////////////
      //2. pastikan tabItem terlihat seluruhnya, scroll jika perlu
      this._ensureItemVisible(tabItem);
      //3. set status active tabItem menjadi true
      tabItem.active = true;//properti tabitem desktop menjadi aktif(mengalami _activeChanged)
  }

  _onTabActiveChanged(tabItem, active) {
      if(active) {
          this._requestDynamicContent(tabItem.id);
      } else {
          this._removeDynamicContent();
      }
  }

  _removeDynamicContent() {//hanya ada satu div content jika content=="dynamic"//v
    let fCheck = (el)=>{
      return el.slot == "content";
    };
    let content = this._getLightDOM(this.lastElementChild, false, fCheck);
    if(content) {
      this.removeChild(content);
    }
  }

  _requestDynamicContent(id) {//v
      let callback = (el)=>{
          el.slot="content";
          this.appendChild(el);//index.html: callback(div);
      };
      this.dispatchEvent(
          new CustomEvent(
              "dynamic-content",//konstruksi event argument 1: nama event
              {   bubbles:true,
                  composed:true,
                  //mengambil anggota active dari event: event.detail.active;
                  detail:{"id":id, "callback":callback/*index.html: decorator diisi div*/}//event "active-changed" mengirim newValue
              }//konstruksi event argument 2: object event
          )
      );
  }
}

window.customElements.define('brown-tab-dynamic-desktop', BrownTabDynamicDesktop);
