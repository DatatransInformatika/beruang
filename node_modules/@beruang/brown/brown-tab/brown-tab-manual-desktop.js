/**
@license
Copyright (c) 2019 The Beruang Project Authors. All rights reserved.
This code may only be used under the BSD style license found at
https://github.com/DatatransInformatika/beruang/blob/master/LICENSE.txt The complete set of authors may be found at
https://github.com/DatatransInformatika/beruang/blob/master/AUTHORS.txt The complete set of contributors may be
found at https://github.com/DatatransInformatika/beruang/blob/master/CONTRIBUTORS.txt
*/
import {html, PolymerElement} from '@polymer/polymer/polymer-element.js';
import {GestureEventListeners} from '@polymer/polymer/lib/mixins/gesture-event-listeners.js';
import {FlattenedNodesObserver} from '@polymer/polymer/lib/utils/flattened-nodes-observer.js';
import '@polymer/iron-flex-layout/iron-flex-layout.js';
import '@webcomponents/shadycss/entrypoints/apply-shim.js';
import {BeruangBehavior} from '@beruang/beruang-behavior.js';
import {BrownBehavior} from '@beruang/brown/brown-behavior.js';
import {BrownMaskBehavior} from '@beruang/brown/brown-mask/brown-mask-behavior.js';
import {BrownTabBehavior} from './brown-tab-behavior.js';
import './brown-tab-style.js';

/**
`brown-tab-dynamic-desktop` is dynamic tab panel element.
@customElement
@polymer
*/
class BrownTabManualDesktop extends BrownTabBehavior(
    BrownMaskBehavior(//syarat masking 1
        BrownBehavior(
            BeruangBehavior(
                GestureEventListeners(PolymerElement)
            )
        )
    )
) {
  static get template() {
    return html`
      <style  include="brown-tab-style"></style>
      <div id="header">
        <iron-icon icon="chevron-left" id="pre-scroll" class="scroller" on-tap="_preScroll"></iron-icon>
        <div id="header-item"><slot id="header-slot" name="header"></slot></div>
        <iron-icon icon="chevron-right" id="post-scroll" class="scroller" on-tap="_postScroll"></iron-icon>
      </div>
      <div id="content"><slot name="content"></slot></div>
      <slot name="mask"></slot><!--syarat masking 2-->
    `;
  }

  ready() {
      super.ready();

      let slot = this.shadowRoot.querySelector("#content");
      let fMonitorCallback = (info) => {
          for(let i=0;i<info.addedNodes.length;i++){
              let content = info.addedNodes[i];
              let activeTabId = content.getAttribute("data-active-tab");
              let nextActiveTab = activeTabId ? this._getTabItemById(activeTabId) :null;
              if(nextActiveTab) {
                  let oldActiveTab = this._getActiveTabItem();
                  if(nextActiveTab!=oldActiveTab) {
                      if(oldActiveTab) {
                          oldActiveTab.active = false;
                      }
                      nextActiveTab.active = true;
                  }
              }
          }//for(let i=0;i<info.addedNodes.length;i++)
      };
      this._contentObserver = new FlattenedNodesObserver(slot, fMonitorCallback);
  }

  _onTabClosing(tabItem) {
    this.dispatchEvent(
        new CustomEvent(
            "manual-tabitem-closing",
            {   bubbles:true,
                composed:true,
                detail:{
                    "tabItem":tabItem,
                    "oldContent":this._getContent(),
                    "nextSibling":this._getTabItemNextSibling(tabItem),
                    "prevSibling":this._getTabItemPrevSibling(tabItem)
                }
            }
        )
    );
  }

  _onTabActiving(tabItem){
      this.dispatchEvent(
          new CustomEvent(
              "manual-tabitem-activing",
              {   bubbles:true,
                  composed:true,
                  detail:{
                      "id":tabItem.id,
                      "oldContent":this._getContent()
                  }
              }
          )
      );
  }

  _onTabActiveChanged(tabItem, active) {}

  _getActiveTabItem() {
      let fCheck = (el)=>{
          let isQualified = el.nodeName=="BROWN-TABITEM-DESKTOP" && el.active;
          return isQualified;
      };
      return this._getLightDOM(this.firstElementChild, true, fCheck);
  }

  _getTabItemById(tabId) {
      let fCheck = (el)=>{
          let data = el.nodeName=="BROWN-TABITEM-DESKTOP" ? el.id : null;
          return tabId==data;
      };
      return this._getLightDOM(this.firstElementChild, true, fCheck);
  }

  _getTabItemNextSibling(tabItem) {
      let fCheck = (el)=>{
          return el.nodeName=="BROWN-TABITEM-DESKTOP";
      };
      return this._getLightDOM(tabItem.nextElementSibling, true, fCheck);
  }

  _getTabItemPrevSibling(tabItem) {
      let fCheck = (el)=>{
          return el.nodeName=="BROWN-TABITEM-DESKTOP";
      };
      return this._getLightDOM(tabItem.previousElementSibling, false, fCheck);
  }

  _getContent() {
    let fCheck = (el)=>{
      return el.getAttribute("slot")=="content";
    };
    return this._getLightDOM(this.lastElementChild, false, fCheck);
  }
}

window.customElements.define('brown-tab-manual-desktop', BrownTabManualDesktop);
