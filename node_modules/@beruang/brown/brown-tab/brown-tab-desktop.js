import {html, PolymerElement} from '@polymer/polymer/polymer-element.js';
import {GestureEventListeners} from '@polymer/polymer/lib/mixins/gesture-event-listeners.js';
import * as Gestures from '@polymer/polymer/lib/utils/gestures.js';
import '@webcomponents/shadycss/entrypoints/apply-shim.js';
import {BeruangBehavior} from '@beruang/beruang-behavior.js';
import {BrownBehavior} from '@beruang/brown/brown-behavior.js';
import '@beruang/brown/brown-style.js';

class BrownTabDesktop extends BrownBehavior(BeruangBehavior(GestureEventListeners(PolymerElement))) {
  static get template() {
    return html`
      <style  include="brown-style">
        :host {
          @apply --layout-vertical;
        }

        :host > #header {
          @apply --layout-horizontal;
          @apply --layout-flex-none;
          @apply --layout-self-stretch;
          background-color: var(--tab-header-bgcolor);
          min-height: var(--tab-header-minheight);
          padding-left:10px;
        }

        :host([dynamic]) >#header {
          padding-left:40px;
        }

        :host > #header ::slotted([slot=header]) {
          @apply --layout-self-stretch;
          padding: 0px 10px;
        }

        :host > #content {
          @apply --layout-flex;
          @apply --layout-self-stretch;
          background-color: var(--tab-content-bgcolor);
        }
      </style>
      <div id="header"><slot id="header-slot" name="header"></slot></div>
      <div id="content"><slot name="content"></slot></div>
    `;
  }

  static get properties() {
    return {
      dynamic: {
        type:Boolean,
        value:false,
        reflectToAttribute:true
      }
    };
  }

  ready() {
    super.ready();
    Gestures.addListener(this, "tap", (e)=>{
      let closing = e.target.classList.contains("closeicon");
      let path = event.path || (event.composedPath && event.composedPath());
      for(let i=0;i<path.length;i++) {
        let el = path[i];
        if(el.nodeName=="BROWN-TABITEM-DESKTOP") {
          if(closing) {//close tabitem
            if(el.active) {//if closing tabitem is active then set other to active
              let other = this._getSibling(el, null);
              if(other) {
                other.active = true;
              }
            }
            this.removeChild(el);
          } else {//set tabitem to active
            if( !el.active ) {
              let other = this._getSibling(el, function(sib){
                return sib.active;//return true if sibling met requirement
              });//search currently active tabitem
              if(other) {
                other.active = false;//set other to non active
              }
              el.active = true;
            }
          }
          break;
        }
      }
    });
  }

  _getSibling(el, callback) {
    let sibling;

  //forward
    let element = el;
    while( (sibling = el.nextElementSibling) ) {
      if( sibling.nodeName=="BROWN-TABITEM-DESKTOP" ) {
        if( !callback || callback(sibling) ) {
          return sibling;
        }
      }
      el = sibling;
    }

  //backward
    element = el;
    while( (sibling = el.previousElementSibling) ) {
      if( sibling.nodeName=="BROWN-TABITEM-DESKTOP") {
        if( !callback || callback(sibling) ) {
          return sibling;
        }
      }
      el = sibling;
    }

    return null;
  }
}

window.customElements.define('brown-tab-desktop', BrownTabDesktop);
