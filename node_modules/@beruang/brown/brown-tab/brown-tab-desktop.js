import {html, PolymerElement} from '@polymer/polymer/polymer-element.js';
import {GestureEventListeners} from '@polymer/polymer/lib/mixins/gesture-event-listeners.js';
import * as Gestures from '@polymer/polymer/lib/utils/gestures.js';
import {FlattenedNodesObserver} from '@polymer/polymer/lib/utils/flattened-nodes-observer.js';
import '@webcomponents/shadycss/entrypoints/apply-shim.js';
import {BeruangBehavior} from '@beruang/beruang-behavior.js';
import {BrownBehavior} from '@beruang/brown/brown-behavior.js';
import '@beruang/brown/brown-style.js';

class BrownTabDesktop extends BrownBehavior(BeruangBehavior(GestureEventListeners(PolymerElement))) {
  static get template() {
    return html`
      <style  include="brown-style">
        :host {
          @apply --layout-vertical;
        }

        :host > #header {
          @apply --layout-horizontal;
          @apply --layout-flex-none;
          @apply --layout-self-stretch;
          background-color: var(--tab-header-bgcolor);
          min-height: var(--tab-header-minheight);
          padding-left:10px;
        }

        :host([dynamic]) >#header {
          padding-left:40px;
        }

        :host > #header ::slotted([slot=header]) {
          @apply --layout-self-stretch;
          padding: 0px 10px;
        }

        :host > #content {
          @apply --layout-flex;
          @apply --layout-self-stretch;
          background-color: var(--tab-content-bgcolor);
        }
      </style>
      <div id="header"><slot id="header-slot" name="header"></slot></div>
      <div id="content"><slot name="content"></slot></div>
    `;
  }

  static get properties() {
    return {
      dynamic: {
        type:Boolean,
        value:false,
        reflectToAttribute:true
      },

      activeItem: {
        type:Object,
        readOnly:true
      }
    };
  }

  ready() {
    super.ready();
    Gestures.addListener(this, "tap", this._onItemTap.bind(this));
    let slot = this.shadowRoot.querySelector("#header-slot");
    this._observer = new FlattenedNodesObserver(slot, (info) => {
      for(let i=0;i<info.addedNodes.length;i++) {
        if(info.addedNodes[i].active) {
          this._setActiveItem(info.addedNodes[i]);
        }
      }
      for(let i=0;i<info.removedNodes.length;i++) {
        if(info.addedNodes[i]==this.activeItem) {
          this._setActiveItem(null);
        }
      }
    });
  }

  _onItemTap(e) {
    let path = event.path || (event.composedPath && event.composedPath());
    for(let i=0;i<path.length;i++) {
      let el = path[i];
      if(el.nodeName=="BROWN-TABITEM-DESKTOP") {
        if( !el.active ) {
          el.active = true;
          if(this.activeItem) {
            this.activeItem.active = false;//activeItem brown-tabitem-desktop
          }
          this._setActiveItem(el);
        }
        break;
      }
    }
  }
}

window.customElements.define('brown-tab-desktop', BrownTabDesktop);
