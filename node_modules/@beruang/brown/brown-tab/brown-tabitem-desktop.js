import {html, PolymerElement} from '@polymer/polymer/polymer-element.js';
import {afterNextRender} from '@polymer/polymer/lib/utils/render-status.js';
import '@webcomponents/shadycss/entrypoints/apply-shim.js';
import {BeruangBehavior} from '@beruang/beruang-behavior.js';
import {BrownBehavior} from '@beruang/brown/brown-behavior.js';
import '@beruang/brown/brown-style.js';

class BrownTabItemDesktop extends BrownBehavior(BeruangBehavior(PolymerElement)) {
  static get template() {
    return html`
      <style  include="brown-style">
        :host {
          @apply --layout-horizontal;
          @apply --layout-center;
          @apply --nouserselect;
          color: var(--tabitem-passive-color);
          font-family: var(--tabitem-font-family);
          font-size: var(--tabitem-font-size);
          cursor:pointer;
        }

        :host ::slotted(iron-icon) {
          height:16px;
        }

        :host ::slotted(.closeiconhover) {
          color: var(--tabitem-active-color);
        }

        :host([active]) {
          color: var(--tabitem-active-color);
          border-bottom: 2px solid var(--tabitem-active-color);
        }
      </style>
      <slot></slot>
    `;
  }

  static get properties() {
    return {
      closable: {
        type:Boolean,
        value:false
      },

      slot: {
        type:String,
        value:"header",
        readOnly:true,
        reflectToAttribute:true
      },

      active: {
        type:Boolean,
        value:false,
        reflectToAttribute:true
      },

      closable: {
        type:Boolean,
        value:false
      },

      initialized: {
        type:Boolean,
        value:false,
        readOnly:true
      }
    };
  }

  static get observers() {
    return [
      '_closableChanged(closable, initialized)'
    ]
  }

  ready() {
    super.ready();
    afterNextRender(this, function() {
      this._setInitialized(true);
    });
  }

  _closableChanged(closable, initialized) {
    if(!initialized) {
      return;
    }

    if(closable) {
      if(!this._closeIcon) {
        this._closeIcon = document.createElement("iron-icon");
        this._closeIcon.icon = "close";
        this._closeIcon.classList.add("closeicon");
        this._closeIcon.addEventListener("mouseenter", (e)=>{
          this._closeIcon.classList.add("closeiconhover");
          this._closeIcon.icon="highlight-off";
        });
        this._closeIcon.addEventListener("mouseleave", (e)=>{
          this._closeIcon.classList.remove("closeiconhover");
          this._closeIcon.icon="close";
        });
      }
      this.appendChild(this._closeIcon);//append as lightDOM
    } else {//remove close icon
      if(this._closeIcon && this._closeIcon.parentNode) {//remove closeIcon only if connected to parentNode
        this._closeIcon.parentNode.removeChild(this._closeIcon);
      }
    }
  }

}

window.customElements.define('brown-tabitem-desktop', BrownTabItemDesktop);
