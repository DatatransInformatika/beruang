/**
@license
Copyright (c) 2019 The Beruang Project Authors. All rights reserved.
This code may only be used under the BSD style license found at
https://github.com/DatatransInformatika/beruang/blob/master/LICENSE.txt The complete set of authors may be found at
https://github.com/DatatransInformatika/beruang/blob/master/AUTHORS.txt The complete set of contributors may be
found at https://github.com/DatatransInformatika/beruang/blob/master/CONTRIBUTORS.txt
*/
import {html, PolymerElement} from '@polymer/polymer/polymer-element.js';
import {GestureEventListeners} from '@polymer/polymer/lib/mixins/gesture-event-listeners.js';
import '@polymer/iron-flex-layout/iron-flex-layout.js';
import '@polymer/iron-icons/iron-icons.js';
import '@polymer/polymer/lib/elements/dom-if.js';
import {BeruangBehavior} from '@beruang/beruang-behavior.js';
import {PolarBehavior} from '@beruang/polar/polar-behavior.js';
import {BrownMaskBehavior} from '@beruang/brown/brown-mask/brown-mask-behavior.js';
import '@beruang/polar/polar-style.js';

/**
`polar-border` is a layout manager with north-south-west-east region surrounding the center.
@customElement
@polymer
*/
class PolarBorder extends PolarBehavior(BrownMaskBehavior(BeruangBehavior(GestureEventListeners(PolymerElement)))) {
    static get template() {
        return html`
            <style include="polar-style">
                 :host{
                     @apply --layout-vertical;
                     --north-height: 100px;
                     --south-height: 100px;
                     --west-width: 100px;
                     --east-width: 100px;
                 }

                 :host > #north {
                     @apply --layout-flex-none;
                     @apply --layout-self-stretch;
                     height: var(--north-height);
                     position:relative;
                 }

                 :host > #north > ::slotted(*) {
                    @apply --layout-fit;
                 }

                 :host > .mid {
                     @apply --layout-flex-auto;
                     @apply --layout-self-stretch;
                     @apply --layout-horizontal;
                 }

                 :host > #south {
                     @apply --layout-flex-none;
                     @apply --layout-self-stretch;
                     height: var(--south-height);
                     position:relative;
                 }

                 :host > #south > ::slotted(*) {
                    @apply --layout-fit;
                 }

                 :host > .mid > #west {
                     @apply --layout-flex-none;
                     @apply --layout-self-stretch;
                     width: var(--west-width);
                     position:relative;
                 }

                 :host > .mid > #west > ::slotted(*) {
                    @apply --layout-fit;
                 }

                 :host > .mid >  #center {
                     @apply --layout-flex-auto;
                     @apply --layout-self-stretch;
                     position:relative;
                 }

                 :host > .mid > #center > ::slotted(*) {
                    @apply --layout-fit;
                 }

                 :host > .mid >  #center > .side {
                     position:absolute;
                     background-color:transparent;
                     z-index:1;
                 }

                 :host > .mid >  #center > .side.horizontal {
                     right:0px;
                     left:0px;
                     height:35px;
                 }

                 :host > .mid >  #center > .side.horizontal.north {
                     top:0px;
                     bottom:auto;
                 }

                 :host > .mid >  #center > .side.horizontal.south {
                     top:auto;
                     bottom:0px;
                 }

                 :host > .mid >  #center > .side.vertical {
                     top:0px;
                     bottom:0px;
                     width:35px;
                 }

                 :host > .mid >  #center > .side.vertical.west {
                     right:auto;
                     left:0px;
                 }

                 :host > .mid >  #center > .side.vertical.east {
                     right:0px;
                     left:auto;
                 }

                 :host > .mid > #east {
                     @apply --layout-flex-none;
                     @apply --layout-self-stretch;
                     width: var(--east-width);
                     position:relative;
                 }

                 :host > .mid > #east > ::slotted(*) {
                    @apply --layout-fit;
                 }

                 :host .half-circle {
                     @apply --layout-horizontal;
                     background-color:var(--polar-border-resizer-background-color);
                     z-index:2;
                     cursor:pointer;
                 }

                 :host .half-circle > iron-icon {
                     width:20px;
                     height:20px;
                     color:white;
                 }

                 :host .resizer.horizontal {
                     @apply --layout-flex-none;
                     @apply --layout-self-stretch;
                     @apply --layout-horizontal;
                     @apply --layout-center-justified;
                     background-color:var(--polar-border-resizer-background-color);
                     height:4px;
                     cursor:ns-resize;
                     overflow:visible;
                 }

                 :host .resizer.horizontal > .half-circle {
                     width: 60px;
                     height: 30px;
                 }

                 :host .resizer.horizontal.north {
                    @apply --layout-start;
                 }

                 :host([north-collapsed]) .resizer.horizontal.north {
                     cursor:default;
                 }

                 :host .resizer.horizontal.north > .half-circle {
                     border-bottom-left-radius: 120px;
                     border-bottom-right-radius: 120px;
                     @apply --layout-center-justified;
                     @apply --layout-start;
                 }

                 :host .resizer.horizontal.south {
                    @apply --layout-end;
                 }

                 :host([south-collapsed]) .resizer.horizontal.south {
                     cursor:default;
                 }

                 :host .resizer.horizontal.south > .half-circle {
                     border-top-left-radius: 120px;
                     border-top-right-radius: 120px;
                     @apply --layout-center-justified;
                     @apply --layout-end;
                 }

                 :host .resizer.vertical {
                     @apply --layout-flex-none;
                     @apply --layout-self-stretch;
                     @apply --layout-vertical;
                     @apply --layout-center-justified;
                     background-color:var(--polar-border-resizer-background-color);
                     width:4px;
                     cursor:ew-resize;
                     overflow:visible;
                 }

                 :host .resizer.vertical > .half-circle {
                     width: 30px;
                     height: 60px;
                 }

                 :host .resizer.vertical.west {
                     @apply --layout-start;
                 }

                 :host([west-collapsed]) .resizer.vertical.west {
                     cursor:default;
                 }

                 :host .resizer.vertical.west > .half-circle {
                     border-top-right-radius: 120px;
                     border-bottom-right-radius: 120px;
                     @apply --layout-start-justified;
                     @apply --layout-center;
                 }

                 :host .resizer.vertical.east {
                     @apply --layout-end;
                 }

                 :host([east-collapsed]) .resizer.vertical.east {
                     cursor:default;
                 }

                 :host .resizer.vertical.east > .half-circle {
                     border-top-left-radius: 120px;
                     border-bottom-left-radius: 120px;
                     @apply --layout-end-justified;
                     @apply --layout-center;
                 }
            </style>

            <template is="dom-if" if="[[_size(north)]]">
                <template is="dom-if" if="[[!northCollapsed]]">
                    <div id="north" on-mouseenter="_regionEnter">
                        <slot id="north-slot" name="north"></slot>
                    </div>
                </template>
                <template is="dom-if" if="[[northResizable]]">
                    <div id="north-resizer" class="resizer horizontal north" on-down="_stopDown" on-track="_resize" on-mouseenter="_regionEnter">
                        <template is="dom-if" if="[[northCollapser]]">
                            <div id="north-collapser" class="half-circle" on-tap="_regionCollapse">
                                <iron-icon icon="[[_northIcon(northCollapsed)]]"></iron-icon>
                            </div>
                        </template>
                    </div>
                </template>
            </template>

	        <div class="mid">
                <template is="dom-if" if="[[_size(west)]]">
                    <template is="dom-if" if="[[!westCollapsed]]">
            		    <div id="west" on-mouseenter="_regionEnter">
                            <slot id="west-slot" name="west"></slot>
                        </div>
                    </template>
                    <template is="dom-if" if="[[westResizable]]">
                        <div id="west-resizer" class="resizer vertical west" on-down="_stopDown" on-track="_resize" on-mouseenter="_regionEnter">
                            <template is="dom-if" if="[[westCollapser]]">
                                <div id="west-collapser" class="half-circle" on-tap="_regionCollapse">
                                    <iron-icon icon="[[_westIcon(westCollapsed)]]"></iron-icon>
                                </div>
                            </template>
                        </div>
                    </template>
                </template>

        		<div id="center">
                    <slot id="center-slot" name="center"></slot>
                    <template is="dom-if" if="[[northResizable]]">
                        <template is="dom-if" if="[[northCollapser]]">
                            <div id="north-side" class="side horizontal north" on-mouseleave="_regionExit"></div>
                        </template>
                    </template>
                    <template is="dom-if" if="[[southResizable]]">
                        <template is="dom-if" if="[[southCollapser]]">
                            <div id="south-side" class="side horizontal south"  on-mouseleave="_regionExit"></div>
                        </template>
                    </template>
                    <template is="dom-if" if="[[westResizable]]">
                        <template is="dom-if" if="[[westCollapser]]">
                            <div id="west-side" class="side vertical west"  on-mouseleave="_regionExit"></div>
                        </template>
                    </template>
                    <template is="dom-if" if="[[eastResizable]]">
                        <template is="dom-if" if="[[eastCollapser]]">
                            <div id="east-side" class="side vertical east"  on-mouseleave="_regionExit"></div>
                        </template>
                    </template>
                </div>

                <template is="dom-if" if="[[_size(east)]]">
                    <template is="dom-if" if="[[eastResizable]]">
                        <div id="east-resizer" class="resizer vertical east" on-down="_stopDown" on-track="_resize" on-mouseenter="_regionEnter">
                            <template is="dom-if" if="[[eastCollapser]]">
                                <div id="east-collapser" class="half-circle" on-tap="_regionCollapse">
                                    <iron-icon icon="[[_eastIcon(eastCollapsed)]]"></iron-icon>
                                </div>
                            </template>
                        </div>
                    </template>
                    <template is="dom-if" if="[[!eastCollapsed]]">
            		     <div id="east" on-mouseenter="_regionEnter">
                            <slot id="east-slot" name="east"></slot>
                        </div>
                    </template>
                </template>
            </div>

            <template is="dom-if" if="[[_size(south)]]">
                <template is="dom-if" if="[[southResizable]]">
                    <div id="south-resizer" class="resizer horizontal south" on-down="_stopDown" on-track="_resize" on-mouseenter="_regionEnter">
                        <template is="dom-if" if="[[southCollapser]]">
                            <div id="south-collapser" class="half-circle" on-tap="_regionCollapse">
                                <iron-icon icon="[[_southIcon(southCollapsed)]]"></iron-icon>
                            </div>
                        </template>
                    </div>
                </template>
                <template is="dom-if" if="[[!southCollapsed]]">
                    <div id="south" on-mouseenter="_regionEnter"><slot id="south-slot" name="south"></slot></div>
                </template>
            </template>

            <slot name="mask"></slot>
        `;
    }

    static get properties() {
      return {
          connected: {
              type:Boolean,
              value:false,
              readOnly:true
          },

          fixedSize: {
              type:Boolean,
              value:false,
              readOnly:true
          },

          north:{
              type: Number,
              value: 0
          },

          northResizable:{
              type: Boolean,
              value: false
          },

          south:{
              type: Number,
              value: 0
          },

          southResizable:{
              type: Boolean,
              value: false
          },

          west:{
              type: Number,
              value: 0
          },

          westResizable:{
              type: Boolean,
              value: false
          },

          east:{
              type: Number,
              value: 0
          },

          eastResizable:{
              type: Boolean,
              value: false
          },

          northCollapser:{
              type: Boolean,
              value: false,
              readOnly:true
          },

          southCollapser:{
              type: Boolean,
              value: false,
              readOnly:true
          },

          westCollapser:{
              type: Boolean,
              value: false,
              readOnly:true
          },

          eastCollapser:{
              type: Boolean,
              value: false,
              readOnly:true
          },

          northCollapsed:{
              type: Boolean,
              value: false,
              readOnly:true,
              reflectToAttribute:true
          },

          southCollapsed:{
              type: Boolean,
              value: false,
              readOnly:true,
              reflectToAttribute:true
          },

          westCollapsed:{
              type: Boolean,
              value: false,
              readOnly:true,
              reflectToAttribute:true
          },

          eastCollapsed:{
              type: Boolean,
              value: false,
              readOnly:true,
              reflectToAttribute:true
          },

          northMinHeight:{
              type:Number,
              value:50
          },

          southMinHeight:{
              type:Number,
              value:50
          },

          westMinWidth:{
              type:Number,
              value:50
          },

          eastMinWidth:{
              type:Number,
              value:50
          },

          centerMinHeight:{
              type:Number,
              value:50
          },

          centerMinWidth:{
              type:Number,
              value:50
          }
      };
    }

    static get observers() {
        return [
            '_regionSize(connected, fixedSize, north, "--north-height")',
            '_regionSize(connected, fixedSize, south, "--south-height")',
            '_regionSize(connected, fixedSize, west, "--west-width")',
            '_regionSize(connected, fixedSize, east, "--east-width")'
        ];
    }

    connectedCallback() {
        super.connectedCallback();
        this._setConnected(true);
        let fWidth = ()=>{ return this.offsetWidth; };
        let fHeight = ()=>{ return this.offsetHeight; };
        let fCallback = (w,h)=>{
            this._setFixedSize(true);
        }
        this._stableSize(fWidth, fHeight, fCallback);
    }

    disconnectedCallback() {
        super.disconnectedCallback();
        this._setConnected(false);
        this._setFixedSize(false);
    }

    _regionSize(connected, fixedSize, size, cssProp) {
        if(connected) {
            if(size>=1) {
                let obj = {};
                obj[cssProp] = size+"px";
                this.updateStyles(obj);
            } else if(size>0 && fixedSize) {//pecahan harus tunggu fixedSize true
                let orientation = "horizontal";
                if( cssProp.indexOf("north")>-1 || cssProp.indexOf("south")>-1 ) {
                    orientation = "vertical";
                }
                let calcSize = size * (orientation=="horizontal" ? this.offsetWidth : this.offsetHeight);
                let obj = {};
                obj[cssProp] = calcSize+"px";
                this.updateStyles(obj);
            }
        }
    }

    _northIcon(collapsed) {
        return collapsed ? "expand-more" : "expand-less";
    }

    _southIcon(collapsed) {
        return collapsed ? "expand-less" : "expand-more";
    }

    _westIcon(collapsed) {
        return collapsed ? "chevron-right" : "chevron-left";
    }

    _eastIcon(collapsed) {
        return collapsed ? "chevron-left" : "chevron-right";
    }

    _size(num) {
        return num > 0;
    }

    _stopDown(event) {
        event.preventDefault();
        event.stopPropagation();
    }

    _resize(event) {
        let isResizer = event.target.classList.contains("resizer");
        if(!isResizer){
            event.stopPropagation();
            return;
        }
        switch(event.detail.state) {
        case 'start':
            let resizer = event.target;
            let id = resizer.id;
            let arr = id.split("-");
            let region = arr[0];//north, south, east, west
            let property = region + "Collapsed"; //westCollapsed, eastCollapsed, northCollapsed, southCollapsed
            let collapsed = this.get(property);
            if(!collapsed) {
                this._region = this.shadowRoot.querySelector("#" + region);//#north, #south, #east, #west
                let center = this.shadowRoot.querySelector("#center");
                switch(region) {
                    case "north":
                    case "south":
                        this._totalHeight = this._region.offsetHeight + center.offsetHeight;
                        this._regionSize = this._region.offsetHeight;
                        break;
                    case "west":
                    case "east":
                        this._totalWidth = this._region.offsetWidth + center.offsetWidth;
                        this._regionSize = this._region.offsetWidth;
                        break;
                }
            }
            break;
        case 'track':
            if(this._region) {
                let size = 0;
                let centerHeight = 0;
                let centerWidth = 0;
                switch(this._region.id) {
                    case "north":
                        size = this._regionSize + event.detail.dy;
                        //consider centerMinHeight
                        centerHeight = this._totalHeight - size;
                        centerHeight = Math.max(centerHeight, this.centerMinHeight);
                        size = this._totalHeight - centerHeight;
                        //consider northMinHeight
                        size = Math.max(size, this.northMinHeight);
                        //apply height
                        this._region.style.height = size + "px";
                        break;
                    case "south":
                        size = this._regionSize - event.detail.dy;
                        //consider centerMinHeight
                        centerHeight = this._totalHeight - size;
                        centerHeight = Math.max(centerHeight, this.centerMinHeight);
                        size = this._totalHeight - centerHeight;
                        //consider southMinHeight
                        size = Math.max(size, this.southMinHeight);
                        //apply height
                        this._region.style.height = size + "px";
                        break;
                    case "west":
                        size = this._regionSize + event.detail.dx;
                        //consider centerMinWidth
                        centerWidth = this._totalWidth - size;
                        centerWidth = Math.max(centerWidth, this.centerMinWidth);
                        size = this._totalWidth - centerWidth;
                        //consider westMinWidth
                        size = Math.max(size, this.westMinWidth);
                        //apply width
                        this._region.style.width = size + "px";
                        break;
                    case "east":
                        //eastMinWidth centerMinWidth
                        size = this._regionSize - event.detail.dx;
                        //consider centerMinWidth
                        centerWidth = this._totalWidth - size;
                        centerWidth = Math.max(centerWidth, this.centerMinWidth);
                        size = this._totalWidth - centerWidth;
                        //consider eastMinWidth
                        size = Math.max(size, this.eastMinWidth);
                        //apply width
                        this._region.style.width = size + "px";
                        break;
                }
            }
            break;
        case 'end':
            if(this._region) {
                delete this._region;
                delete this._regionSize;
                delete this._totalHeight;
                delete this._totalWidth;
            }
            break;
        }
    }

    _regionEnter(event) {
        let arr = event.target.id.split("-");
        let region = arr[0];
        this._setNorthCollapser(region=="north");
        this._setSouthCollapser(region=="south");
        this._setWestCollapser(region=="west");
        this._setEastCollapser(region=="east");
    }

    _regionExit(event) {
        let arr = event.target.id.split("-");
        let region = arr[0];
        switch(region) {
            case "north":
                this._setNorthCollapser(false);
                break;
            case "south":
                this._setSouthCollapser(false);
                break;
            case "west":
                this._setWestCollapser(false);
                break;
            case "east":
                this._setEastCollapser(false);
                break;
        }
    }

    _collapser(path) {
		for(let i=0;i<path.length;i++) {
			if(path[i].classList.contains("half-circle")) {
				return path[i];
			}
		}
		return null;
	}

    _regionCollapse(event) {
        let path = event.path || (event.composedPath && event.composedPath());
        let collapser = this._collapser(path);
        if( !collapser ) {
            return;
        }
        let arr = collapser.id.split("-");
        let region = arr[0];
        switch(region){
            case "north":
                this._setNorthCollapsed(!this.northCollapsed);
                if(this.northCollapsed) {
                    this._setNorthCollapser(false);
                }
                break;
            case "south":
                this._setSouthCollapsed(!this.southCollapsed);
                if(this.southCollapsed) {
                    this._setSouthCollapser(false);
                }
                break;
            case "west":
                this._setWestCollapsed(!this.westCollapsed);
                if(this.westCollapsed) {
                    this._setWestCollapser(false);
                }
                break;
            case "east":
                this._setEastCollapsed(!this.eastCollapsed);
                if(this.eastCollapsed) {
                    this._setEastCollapser(false);
                }
                break;
        }

    }
}
window.customElements.define('polar-border', PolarBorder);
