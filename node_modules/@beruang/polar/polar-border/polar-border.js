/**
@license
Copyright (c) 2019 The Beruang Project Authors. All rights reserved.
This code may only be used under the BSD style license found at
https://github.com/DatatransInformatika/beruang/blob/master/LICENSE.txt The complete set of authors may be found at
https://github.com/DatatransInformatika/beruang/blob/master/AUTHORS.txt The complete set of contributors may be
found at https://github.com/DatatransInformatika/beruang/blob/master/CONTRIBUTORS.txt
*/
import {html, PolymerElement} from '@polymer/polymer/polymer-element.js';
import {GestureEventListeners} from '@polymer/polymer/lib/mixins/gesture-event-listeners.js';
import '@polymer/iron-flex-layout/iron-flex-layout.js';
import '@polymer/polymer/lib/elements/dom-if.js';
import {BeruangBehavior} from '@beruang/beruang-behavior.js';
import {PolarBehavior} from '@beruang/polar/polar-behavior.js';
import '@beruang/polar/polar-style.js';

/**
`polar-col` is vertical layout manager.
@customElement
@polymer
*/
class PolarBorder extends PolarBehavior(BeruangBehavior(GestureEventListeners(PolymerElement))) {
    static get template() {
        return html`
            <style include="polar-style">
                 :host{
                     @apply --layout-vertical;
                 }

                 :host > #north {
                     @apply --layout-flex-none;
                     @apply --layout-self-stretch;
                     height: 100px;
                     position:relative;
                 }

                 :host > #north > ::slotted(*) {
                    @apply --layout-fit;
                 }

                 :host > .mid {
                     @apply --layout-flex-auto;
                     @apply --layout-self-stretch;
                     @apply --layout-horizontal;
                 }

                 :host > #south {
                     @apply --layout-flex-none;
                     @apply --layout-self-stretch;
                     height: 100px;
                     position:relative;
                 }

                 :host > #south > ::slotted(*) {
                    @apply --layout-fit;
                 }

                 :host > .mid > #west {
                     @apply --layout-flex-none;
                     @apply --layout-self-stretch;
                     width: 100px;
                     position:relative;
                 }

                 :host > .mid > #west > ::slotted(*) {
                    @apply --layout-fit;
                 }

                 :host > .mid >  #center {
                     @apply --layout-flex-auto;
                     @apply --layout-self-stretch;
                     position:relative;
                 }

                 :host > .mid > #center > ::slotted(*) {
                    @apply --layout-fit;
                 }

                 :host > .mid > #east {
                     @apply --layout-flex-none;
                     @apply --layout-self-stretch;
                     width: 100px;
                     position:relative;
                 }

                 :host > .mid > #east > ::slotted(*) {
                    @apply --layout-fit;
                 }

                 :host .half-circle {
                     background-color:var(--polar-border-resizer-background-color);
                     z-index:1;
                 }

                 :host .horizontal.resizer {
                     @apply --layout-flex-none;
                     @apply --layout-self-stretch;
                     @apply --layout-horizontal;
                     @apply --layout-center-justified;
                     background-color:var(--polar-border-resizer-background-color);
                     height:4px;
                     cursor:ns-resize;
                     overflow:visible;
                 }

                 :host .horizontal.resizer > .half-circle {
                     width: 60px;
                     height: 30px;
                 }

                 :host .horizontal.resizer.north {
                    @apply --layout-start;
                 }

                 :host .horizontal.resizer.north > .half-circle {
                     border-bottom-left-radius: 120px;
                     border-bottom-right-radius: 120px;
                 }

                 :host .horizontal.resizer.south {
                    @apply --layout-end;
                 }

                 :host .horizontal.resizer.south > .half-circle {
                     border-top-left-radius: 120px;
                     border-top-right-radius: 120px;
                 }

                 :host .vertical.resizer {
                     @apply --layout-flex-none;
                     @apply --layout-self-stretch;
                     @apply --layout-vertical;
                     @apply --layout-center-justified;
                     background-color:var(--polar-border-resizer-background-color);
                     width:4px;
                     cursor:ew-resize;
                     overflow:visible;
                 }

                 :host .vertical.resizer > .half-circle {
                     width: 30px;
                     height: 60px;
                 }

                 :host .vertical.resizer.west {
                     @apply --layout-start;
                 }

                 :host .vertical.resizer.west > .half-circle {
                     border-top-right-radius: 120px;
                     border-bottom-right-radius: 120px;
                 }

                 :host .vertical.resizer.east {
                     @apply --layout-end;
                 }

                 :host .vertical.resizer.east > .half-circle {
                     border-top-left-radius: 120px;
                     border-bottom-left-radius: 120px;
                 }
            </style>
            <div id="north"><slot name="north"></slot></div>
            <template is="dom-if" if="[[northResizable]]">
                <div id="north-resizer" class="horizontal resizer north" on-down="_stopDown" on-track="_resize">
                    <div class="half-circle"></div>
                </div>
            </template>
	        <div class="mid">
        		<div id="west"><slot name="west"></slot></div>
                <template is="dom-if" if="[[westResizable]]">
                    <div id="west-resizer" class="vertical resizer west" on-down="_stopDown" on-track="_resize" on-mousee>
                        <div class="half-circle"></div>
                    </div>
                </template>
        		<div id="center"><slot name="center"></slot></div>
                <template is="dom-if" if="[[eastResizable]]">
                    <div id="east-resizer" class="vertical resizer east" on-down="_stopDown" on-track="_resize">
                        <div class="half-circle"></div>
                    </div>
                </template>
        		<div id="east"><slot name="east"></slot></div>
            </div>
            <template is="dom-if" if="[[southResizable]]">
                <div id="south-resizer" class="horizontal resizer south" on-down="_stopDown" on-track="_resize">
                    <div class="half-circle"></div>
                </div>
            </template>
            <div id="south"><slot name="south"></slot></div>
        `;
    }

    static get properties() {
      return {
          north:{
              type: Number,
              value: 0
          },

          northResizable:{
              type: Boolean,
              value: false
          },

          south:{
              type: Number,
              value: 0
          },

          southResizable:{
              type: Boolean,
              value: false
          },

          west:{
              type: Number,
              value: 0
          },

          westResizable:{
              type: Boolean,
              value: false
          },

          east:{
              type: Number,
              value: 0
          },

          eastResizable:{
              type: Boolean,
              value: false
          }
      };
    }

    _stopDown(event) {
        event.preventDefault();
        event.stopPropagation();
    }

    _resizer(path) {
        for(let i=0;i<path.length;i++) {
            if(path[i].classList.contains("resizer")) {
                return path[i];
            }
        }
        return null;
    }

    _resize(event) {
        switch(event.detail.state) {
        case 'start':
            let path = event.path || (event.composedPath && event.composedPath());
            let resizer = this._resizer(path);
            let id = resizer.id;
            let arr = id.split("-");
            let region = arr[0];//north, south, east, west
            this._region = this.shadowRoot.querySelector("#" + region);//#north, #south, #east, #west
            switch(region) {
            case "north":
            case "south":
                this._regionSize = this._region.offsetHeight;
                break;
            case "west":
            case "east":
                this._regionSize = this._region.offsetWidth;
                break;
            }
            break;
        case 'track':
            let size = 0;
            switch(this._region.id) {
            case "north":
                size = this._regionSize + event.detail.dy;
                this._region.style.height = size + "px";
                break;
            case "south":
                size = this._regionSize - event.detail.dy;
                this._region.style.height = size + "px";
                break;
            case "west":
                size = this._regionSize + event.detail.dx;
                this._region.style.width = size + "px";
                break;
            case "east":
                size = this._regionSize - event.detail.dx;
                this._region.style.width = size + "px";
                break;
            }
            break;
        case 'end':
            delete this._region;
            delete this._regionSize;
            break;
        }
    }
}
window.customElements.define('polar-border', PolarBorder);
