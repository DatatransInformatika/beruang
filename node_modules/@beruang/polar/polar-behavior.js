/**
@license
Copyright (c) 2019 The Beruang Project Authors. All rights reserved.
This code may only be used under the BSD style license found at
https://github.com/DatatransInformatika/beruang/blob/master/LICENSE.txt The complete set of authors may be found at
https://github.com/DatatransInformatika/beruang/blob/master/AUTHORS.txt The complete set of contributors may be
found at https://github.com/DatatransInformatika/beruang/blob/master/CONTRIBUTORS.txt
*/
import {dedupingMixin} from '@polymer/polymer/lib/utils/mixin.js';
import {FlattenedNodesObserver} from '@polymer/polymer/lib/utils/flattened-nodes-observer.js';

/**
`PolarBehavior`
@polymerBehavior PolarBehavior
*/
let internalPolarBehavior = (base) =>
class extends base {
	static get properties() {
		return {
			/** Does not wrap child element overflows in main axis direction.
			@type{Boolean}
			*/
			noWrap: {
				type: Boolean,
				value: false,
				reflectToAttribute: true
			},

			/** Shows overflowed child element portion in horizontal direction.
			@type{Boolean}
			*/
			overflowXVisible: {
				type: Boolean,
				value: false,
				reflectToAttribute: true
			},

			/** Hides overflowed child element portion in horizontal direction.
			@type{Boolean}
			*/
			overflowXHidden: {
				type: Boolean,
				value: false,
				reflectToAttribute: true
			},

			/** Always shows horizontal scroller.
			@type{Boolean}
			*/
			overflowXScroll: {
				type: Boolean,
				value: false,
				reflectToAttribute: true
			},

			/** Only shows horizontal scroller when child element overflows.
			@type{Boolean}
			*/
			overflowXAuto: {
				type: Boolean,
				value: false,
				reflectToAttribute: true
			},

			/** Shows overflowed child element portion in vertical direction.
			@type{Boolean}
			*/
			overflowYVisible: {
				type: Boolean,
				value: false,
				reflectToAttribute: true
			},

			/** Hides overflowed child element portion in vertical direction.
			@type{Boolean}
			*/
			overflowYHidden: {
				type: Boolean,
				value: false,
				reflectToAttribute: true
			},

			/** Always shows vertical scroller.
			@type{Boolean}
			*/
			overflowYScroll: {
				type: Boolean,
				value: false,
				reflectToAttribute: true
			},

			/** Only shows vertical scroller when child element overflows.
			@type{Boolean}
			*/
			overflowYAuto: {
				type: Boolean,
				value: false,
				reflectToAttribute: true
			}
    	};
	}
}

export const PolarBehavior = dedupingMixin(internalPolarBehavior);
