if(window.BeruangPlace) {
  window.BeruangPlace._setPopStateListener(false);
  window.BeruangPlace._setLeavePageWarn(false);
}

window.BeruangPlace =
(function(){
return {
  setContainer: function(obj) {
    if(obj!=this._singleWidgetContainer) {
      this._singleWidgetContainer = obj;
      for(var i=0;i<this._places.length;i++) {
        this._closePresenter(this._places[i]);
      }
      this._places = [];
      this._currentPlace = null;
    }
  },

  go: function(place, data, callback) {
    this._enqueue('go', place, data, callback);
  },

  remove: function(place, callback) {
    this._enqueue('remove', place, null, callback);
  },

  _enqueue: function(cmd, place, data, callback) {
    if(this._busy) {
      this._queue.unshift({'cmd':cmd, 'place':place, 'data':data, 'callback':callback});
    } else {
      this._proceed(cmd, place, data, callback);
    }
  },

  _dequeue: function() {
    if(this._busy) {
      if(this._callback) {
        var cb = this._callback;
        setTimeout(function(){ cb(); }, 100);
      }
      this._data = null;
      this._callback = null;
      var obj = this._queue.pop();
      if(obj) {
        setTimeout( function(){
          this._proceed(obj.cmd, obj.place, obj.data, obj.callback);
        }.bind(this), 500);
      } else {
        this._busy = false;
      }
    }
  },

  _proceed: function(cmd, place, data, callback) {
    this._busy = true;
    this._data = data;
    this._callback = callback;
    if(cmd=='go') {
      this._go(place, data, callback);
    } else if(cmd=='remove') {
      this._remove(place, callback);
    }
  },

  _go: function(place, data, callback) {
    if(place!=this._currentPlace) {
      var nextIdx = this._places.indexOf(place);
      if( nextIdx>-1 ) {
        var currentIdx = this._places.indexOf(this._currentPlace);
        window.history.go(nextIdx - currentIdx);//popStateHandler will call this.startPresenter(place, data);
      } else {
        this._startPresenter(place, true);
      }
    } else {
      this._dequeue();
    }
  },

  _closePresenter: function(place) {
    if(!place.endsWith(this._removedSuffix)) {
      var presenter = this._singleton[place];
      if(presenter) {
        presenter.close();
      }
    }
  },

  _remove: function(place, callback) {
    if( place.endsWith(this._removedSuffix)){
        throw new ReferenceError('place ' + place + ' is already removed');
    }
    var currentIdx = this._places.indexOf(this._currentPlace);
    var removedIdx = this._places.indexOf(place);
    this._closePresenter(place);
    var step = removedIdx - currentIdx;
    this._historyStepThenRun(step!=0, step, function(){
      var removedPlace = place + this._removedSuffix;
      var obj = window.history.state;
      obj.place = removedPlace;
      window.history.replaceState(obj, null, this._placePrefix + removedPlace);
      this._places[removedIdx] = removedPlace;
      if(step==0) {
        var nextIdx = this._forwardValidPlace(removedIdx+1);
        if(nextIdx<0) {
          nextIdx = this._backwardValidPlace(removedIdx-1);
        }
        this._currentPlace = removedPlace;
        if(nextIdx>-1) {
          //setTimeout( function(){
            window.history.go(nextIdx - currentIdx);//_dequeue will be called in this._startPresenter
          //}.bind(this), 100);
        } else {
          this._dequeue();
        }
      } else {
        //setTimeout( function(){
          window.history.go( -1 * step );//_dequeue will be called in this._startPresenter
        //}.bind(this), 100);
      }
    }.bind(this));
  },

  _forwardValidPlace: function(idx) {
    var nextIdx = -1;
    for(var i=idx; i<this._places.length; i++) {
      if( !this._places[i].endsWith(this._removedSuffix) ) {
        nextIdx = i;
        break;
      }
    }
    return nextIdx;
  },

  _backwardValidPlace: function(idx) {
    var nextIdx = -1;
    for(var i=idx; i>=0; i--) {
      if( !this._places[i].endsWith(this._removedSuffix) ) {
        nextIdx = i;
        break;
      }
    }
    return nextIdx;
  },

  _singleWidgetContainer : null,

  _data: null,

  _callback: null,

  _currentPlace : null,

  _queue: [],

  _busy: false,

  _places: [],

  _singleton : {},

  _placePrefix: '#',

  _removedSuffix: '^',

  _historyStepThenRun: function(condition, step, callback) {
    if(condition) {
      this._setPopStateListener(false);
      window.history.go( step );
      setTimeout( function(){
        this._setPopStateListener(true);
        callback();
      }.bind(this), 100 );
    } else {
      callback();
    }
  },

  _startPresenter: function(place, pushState) {
    if(place!=this._currentPlace) {
      var presenter = this._singleton[place];
      if(presenter) {
        this._startPresenterDo(place, presenter, pushState, this._data);
      } else {
        window.BeruangFactory.importMultiModule([place + '-view', place + '-presenter'],
          function(mv, mp){
            var v = new mv.default();
            var p = new mp.default(v);
            this._startPresenterDo(place, p, pushState, this._data);
          }.bind(this)
        );
      }
    } else {
      this._dequeue();
    }
  },

  _startPresenterDo: function(place, presenter, pushState, data) {
    if(presenter.isSingleTon()){
      this._singleton[place] = presenter;
    }
    if(presenter.isHistory() && pushState) {
      var len = this._places.length;
      var step = 0;
      if( len>0 ) {//assumption: has valid _currentPlace
        if( !this._currentPlace ) {
          throw new ReferenceError('invalid currentPlace while places array exists');
        }
        var lastValidIdx = -1;
        for(var i=len-1;i>=0;i--) {
          if( !this._places[i].endsWith(this._removedSuffix) ) {
            lastValidIdx = i;
            this._places.splice(lastValidIdx+1, this._places.length - lastValidIdx - 1);
            break;
          }
        }
        var currentIdx = this._places.indexOf(this._currentPlace);
        step = lastValidIdx - currentIdx;
      }
      this._currentPlace = place;
      this._places.push(place);
      this._historyStepThenRun(step!=0, step, function(){
        window.history.pushState({'place':place}, null, this._placePrefix + place);
        this._dequeue();
      }.bind(this));
    } else {
      this._currentPlace = place;
      this._dequeue();
    }
    presenter.start(this._singleWidgetContainer, true, data);
  },

  _validHistoryStep: function(place) {
    var valid = true;
    var nextIdx = this._places.indexOf(place);
    if( nextIdx<0 ) {//assumption: only happen when history goes backward
      setTimeout( function(){ window.history.forward();/*so recover with forward*/ }, 100);
      valid = false;
    } else if( place.endsWith(this._removedSuffix) ) {
      var referenceIdx = this._places.indexOf(this._currentPlace);
      var step = nextIdx - referenceIdx;
      var alternativeIdx = -1;
      if( step<0 ) {//backward
        alternativeIdx = this._backwardValidPlace(nextIdx-1);
      } else if( step>0 ) {//forward
        alternativeIdx = this._forwardValidPlace(nextIdx+1);
      }
      setTimeout(function(){
        if(alternativeIdx>-1) {
          window.history.go(alternativeIdx - nextIdx);//go to alternative place
        } else {
          window.history.go( -1 * step );//back to _currentPlace
        }
      }, 100);
      valid = false;
    } else {
      var presenter = this._singleton[this._currentPlace];
      if( presenter ) {
        var currentIdx = this._places.indexOf(this._currentPlace);
        var offset = currentIdx - nextIdx;
        if(offset==0) {
          valid = false;
        } else if(!presenter.mayLeave() ) {
          setTimeout(function(){
            window.history.go(offset);
          }, 100);
          valid = false;
        }
      }
    }
    return valid;
  },

  _popStateHandler: function(e) {
    var place = e.state ? e.state.place : null;//window.location.href.split(this._placePrefix)[1];
    if(this._validHistoryStep(place)){
      this._startPresenter(place, false);
    }
  },

  _setPopStateListener: function(set) {
    if(this._fPopStateHandler) {
      window.removeEventListener('popstate', this._fPopStateHandler);
    }
    if(set) {
      this._fPopStateHandler = this._fPopStateHandler || this._popStateHandler.bind(this);
      window.addEventListener('popstate', this._fPopStateHandler);
    }
  },

  _setLeavePageWarn: function(set) {
    if(this._fLeavePageWarn) {
      window.removeEventListener('beforeunload', this._fLeavePageWarn);
    }
    if(set) {
      this._fLeavePageWarn = function(e) {
        e.returnValue = 'Are you sure you want to leave?';
      };
      window.addEventListener('beforeunload', this._fLeavePageWarn);
    }
  }
};
}());

setTimeout( function(){
  window.BeruangPlace._setPopStateListener(true);
  window.BeruangPlace._setLeavePageWarn(true);
}, 100);
